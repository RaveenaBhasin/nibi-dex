/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, TokenInfo, Addr, QueryMsg, PoolInfo } from "./Factory.types";
export interface FactoryReadOnlyInterface {
  contractAddress: string;
  pair: ({
    assetInfos
  }: {
    assetInfos: TokenInfo[];
  }) => Promise<PoolInfo>;
  getOwner: () => Promise<Addr>;
}
export class FactoryQueryClient implements FactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.pair = this.pair.bind(this);
    this.getOwner = this.getOwner.bind(this);
  }

  pair = async ({
    assetInfos
  }: {
    assetInfos: TokenInfo[];
  }): Promise<PoolInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pair: {
        asset_infos: assetInfos
      }
    });
  };
  getOwner = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_owner: {}
    });
  };
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createNewPair: ({
    assetInfos
  }: {
    assetInfos: TokenInfo[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FactoryClient extends FactoryQueryClient implements FactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createNewPair = this.createNewPair.bind(this);
  }

  createNewPair = async ({
    assetInfos
  }: {
    assetInfos: TokenInfo[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_new_pair: {
        asset_infos: assetInfos
      }
    }, fee, memo, _funds);
  };
}